# .github/workflows/docker-publish.yml

name: Docker Publish CI

# This workflow runs on every push to the `main` branch.
on:
  push:
    branches: [ "main" ]
    # FIX: Add paths-ignore to prevent running the workflow on documentation changes.
    # The workflow will be skipped if a commit ONLY contains changes to these files/paths.
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
      - 'docker-compose.yml'
      - '.devcontainer/**'
      - 'docs/**' # Any future documentation folder

jobs:
  build-and-publish:
    # Use the latest version of Ubuntu as the runner.
    runs-on: ubuntu-latest
    
    # Grant permissions for the workflow to publish packages.
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Check out your repository code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub.
      # This uses the secrets you created in your GitHub repository settings.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Extract metadata (like tags and labels) for the Docker image.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Dynamically generate the image name from your Docker Hub username secret
          # and the name of the current GitHub repository.
          # Example: yourdockerhubusername/tiny-bank-server
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}

      # Step 4: Build and push the Docker image to Docker Hub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
